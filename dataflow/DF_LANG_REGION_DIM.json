{
	"name": "DF_LANG_REGION_DIM",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText_Language",
						"type": "DatasetReference"
					},
					"name": "LanguageSource"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText_Region",
						"type": "DatasetReference"
					},
					"name": "RegionSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Snowflake_imdb_db",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "Snowflake_imdb_db",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "surrogateKey2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     JOB_ID as string (\"AN11\")",
				"}",
				"source(output(",
				"          {ISO Language Names} as string,",
				"          Language_Abbr as string,",
				"          {Endonym(s)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> LanguageSource",
				"source(output(",
				"          country_code as string,",
				"          country_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RegionSource",
				"LanguageSource keyGenerate(output(LanguageID_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"RegionSource keyGenerate(output(CountryID_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"surrogateKey1 derive(DI_LOAD_DATE = toString(currentDate(), 'yyyy-MM-dd'),",
				"          DI_JOB_ID = $JOB_ID) ~> derivedColumn1",
				"surrogateKey2 derive(DI_LOAD_DATE = toString(currentDate(), 'yyyy-MM-dd'),",
				"          DI_JOB_ID = $JOB_ID) ~> derivedColumn2",
				"derivedColumn1 select(mapColumn(",
				"          {ISO Language Names},",
				"          Language_Abbr,",
				"          {Endonym(s)},",
				"          LanguageID_SK,",
				"          DI_LOAD_DATE,",
				"          DI_JOB_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn2 select(mapColumn(",
				"          country_code,",
				"          country_name,",
				"          CountryID_SK,",
				"          DI_LOAD_DATE,",
				"          DI_JOB_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          LANGUAGEID_SK = LanguageID_SK,",
				"          ISO_LANGUAGE_NAMES = {ISO Language Names},",
				"          LANGUAGE_ABBR = Language_Abbr,",
				"          ENDONYMS = {Endonym(s)},",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT = DI_LOAD_DATE",
				"     )) ~> sink1",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          COUNTRYID_SK = CountryID_SK,",
				"          COUNTRY_CODE = country_code,",
				"          COUNTRY_NAME = country_name,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT = DI_LOAD_DATE",
				"     )) ~> sink2"
			]
		}
	}
}